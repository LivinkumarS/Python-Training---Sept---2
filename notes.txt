Python
-------
>> It is a high-level, interpreted, general-purpose programming language.
>> known for its simplicity and readability

human written code ---> machine code.
interpreted ---> line by line code execution.

compilation ---> each and every line will be converted into machine code in one go. the executed
interpreted ---> code will be converted and executed line by line.

Extension --> .py
to execute python file ---> python filename.

First code 
------------
print(data)  --> printing something at the output.
input(str) --> prompt data from user. always return a string

Variables
----------
>> a name that stores a value in a memory.
varName=data

Rules of naming:
----------------
>> start with a letter or an underscore
>> no spaces and no special char.
>> case-sensitive.

Basic syntax:
---------------
1) Indentation--> space before a block of code.
2) Case-sensitive. uppercase and lowercase are treated as different things. (a=A)
3) Comments ---> increases readability.
   single line comment---> # 
   multiline comments ---> ''' comments '''



Datatypes
---------
integer --> whole numbers --> -2,-1,0,1,2,3,33,400...
float --> decimal numbers --> -2.22,9.99....2.0

string --> Sequence of char wrapped with either '' or "".
concatination --> '+' used to attach 2 strings together.
formatted string--> f""

boolean --> True or False 


Type Casting
------------
>> Converting a datatype to another.
type(obj) --> find out the datatype of given object. <class int>

int() --> convert anything into integer. int('123')--> 123
str()  --> into string
float() --> into float

Operators
----------
5 + 6 = 11
+ ---> Oerator
5,6--> Operands (the values on which operator works)

Arithmetic:
------------
+ add
- sub 
* mul
/ div
// floor div (return whole number).Ex: 30/20-->1.5 30//20-->1 
% modulus ---> reminder
** exponentiation. 2**2---> 2 power 2---> 4

Comparison Operators (boolean)
------------------------------
== ---> equal.
!= ---> not equal
> ---> greater than
< ---> lesser than
>= ---> greater or equal
<= ---> lesser or equal

Logical Operators (Boolean Values)
----------------------------------
And ---> and ---> True --> both are True.
Or  ---> or  ---> True --> Any one is True.
Not ---> not --> invert a boolean

Bool1    Bool2     And      or 
True     True      True     True 
True     False     False    True
False    True      False    True
False    False     False    False

Assignment Operators
--------------------
= ---> assign
+= ---> add assign
-= ---> sub and assign
*= ---> mul and assign
/= ---> div and assign
//= ---> floor div and assign
%=  ---> mod and assign
**= ---> expo and assign

Bitwise (bits)
--------
AND --> & ---> and operation with bits. 7&6
OR --> | --> or operation with bits. 5|11
NOT --> ~ --> not operations with bits (~n=-(1+n)). ~5
X-OR --> ^ --> x-or between bits. 8^12
right shift --> num>>pos --> 10>>2
left shift ---> num<<pos --> 10<<2


Control Flow
-------------
>> python will execute the code line by line.with Control flow, we can make decisions depending on conditions.

if block ---> execute the code only when the given condition is True.

syntax:
--------
if condition:
   block of code

else block ---> execute the code only when the if block condition is False

elif ---> execute the code only when the given condition is True .
syntax:
-------
elif condition:
   block of code

mark--> 100

90-100 --> O.
80-89---> A 
70-79-->B+
60-69 -->B
50-59--->C 
<50 -->Fail

Nested If 
-------------
If block inside another if block.
Ex:
---

if cond1:
   if cond2:
      Block Of code