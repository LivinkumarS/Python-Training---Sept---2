Python
-------
>> It is a high-level, interpreted, general-purpose programming language.
>> known for its simplicity and readability

human written code ---> machine code.
interpreted ---> line by line code execution.

compilation ---> each and every line will be converted into machine code in one go. the executed
interpreted ---> code will be converted and executed line by line.

Extension --> .py
to execute python file ---> python filename.

First code 
------------
print(data)  --> printing something at the output.
input(str) --> prompt data from user. always return a string

Variables
----------
>> a name that stores a value in a memory.
varName=data

Rules of naming:
----------------
>> start with a letter or an underscore
>> no spaces and no special char.
>> case-sensitive.

Basic syntax:
---------------
1) Indentation--> space before a block of code.
2) Case-sensitive. uppercase and lowercase are treated as different things. (a=A)
3) Comments ---> increases readability.
   single line comment---> # 
   multiline comments ---> ''' comments '''



Datatypes
---------
integer --> whole numbers --> -2,-1,0,1,2,3,33,400...
float --> decimal numbers --> -2.22,9.99....2.0

string --> Sequence of char wrapped with either '' or "".
concatination --> '+' used to attach 2 strings together.
formatted string--> f" {var1} {var2} "
Strings are immutable.

In built methods 
-------------------
.upper() ---> convert into uppercase
.lower() ---> convert into lowercase
.title() ---> convert into titlecase 

.strip() --> removes excess space at begenning and ending.

.startswith(subStr) --> boolean. checks if the string starts with given substring.
.endswith(subStr) --> boolean. checks if the string ends with given substring.

find(subStr) ---> returns position of the given substring. -1--> not found.
.count(subStr) --> find the number of occur. 

.replace(old, new) --> used to replace a particular substring.

.split() ---> split the string into a list of elements.
.join(list) --> joins the string inside a list

String Operations 
-----------------
+ --> concatination 
* --> Repetition
membership --> in, not in (Boolean). subStr in str

boolean --> True or False 


Type Casting
------------
>> Converting a datatype to another.
type(obj) --> find out the datatype of given object. <class int>

int() --> convert anything into integer. int('123')--> 123
str()  --> into string
float() --> into float
list()
tuple()
set()
dict()

Operators
----------
5 + 6 = 11
+ ---> Oerator
5,6--> Operands (the values on which operator works)

Arithmetic:
------------
+ add
- sub 
* mul
/ div
// floor div (return whole number).Ex: 30/20-->1.5 30//20-->1 
% modulus ---> reminder
** exponentiation. 2**2---> 2 power 2---> 4

Comparison Operators (boolean)
------------------------------
== ---> equal.
!= ---> not equal
> ---> greater than
< ---> lesser than
>= ---> greater or equal
<= ---> lesser or equal

Logical Operators (Boolean Values)
----------------------------------
And ---> and ---> True --> both are True.
Or  ---> or  ---> True --> Any one is True.
Not ---> not --> invert a boolean

Bool1    Bool2     And      or 
True     True      True     True 
True     False     False    True
False    True      False    True
False    False     False    False

Assignment Operators
--------------------
= ---> assign
+= ---> add assign
-= ---> sub and assign
*= ---> mul and assign
/= ---> div and assign
//= ---> floor div and assign
%=  ---> mod and assign
**= ---> expo and assign

Bitwise (bits)
--------
AND --> & ---> and operation with bits. 7&6
OR --> | --> or operation with bits. 5|11
NOT --> ~ --> not operations with bits (~n=-(1+n)). ~5
X-OR --> ^ --> x-or between bits. 8^12
right shift --> num>>pos --> 10>>2
left shift ---> num<<pos --> 10<<2

Indexing and slicing
----------------------
len(obj) --> length of that obj.
Indexing accessing elements using its corresponding index.
var[ind]. negative indexing.

Slicing ---> extract a particular rang of an object.
obj[:end]
obj[start:]
obj[start:end]
obj[start:end:step]
obj[::end]


Control Flow
-------------
>> python will execute the code line by line.with Control flow, we can make decisions depending on conditions.

if block ---> execute the code only when the given condition is True.

syntax:
--------
if condition:
   block of code

else block ---> execute the code only when the if block condition is False

elif ---> execute the code only when the given condition is True .
syntax:
-------
elif condition:
   block of code

mark--> 100

90-100 --> O.
80-89---> A 
70-79-->B+
60-69 -->B
50-59--->C 
<50 -->Fail

Nested If 
-------------
If block inside another if block.
Ex:
---

if cond1:
   if cond2:
      Block Of code


Loops:
---------
>> Loop is a control structure that allows us to execute a block of code repeatedly until a condition is met.

While Loop 
-----------
syntax:
-------
while condition:
   block of code

>> Runs as long as the condition is True.

For Loop 
---------
>> To use for loop we need an iterable object.


For Loop 
--------
syntax:
---------
for var in iterableObj:
   block of code

range in-built method 
-----------------------
>> used to create a temporary iterable object.

range(end) --> range(5) --> [0,1,2,3,4]
range(start,end) --> range(2,15) --> [2,3,4,5,6,7,8,9,10,11,12,13,14]
range(start,end,step) ---> range(2,15,3)-->[2,5,8,11,14]


Control Statements of Loops:
------------------------------
break --> used to stop a loop
continue --> used to skip the current iteration

1-100
1,2,4,7,8,11,13,14,"buzz",16,17,19,22,23,26,28,29,"buzz"...100


Data Structures
----------------
>> It is a way to store, organise and manipulate data efficiently.

Built in DS:
------------
List,
Tuple,
Set,
Dictionary

List 
------
>> [val1, val2....] --> to initiate a list
>> Ordered, mutable and it allows duplicate

In built Methods 
----------------
.append(ele) --> at the end adding an element
.insert(ind,ele) --> adds an element at any index
.remove(ele) ---> removing an element (first occur)
.pop() ---> remove the last element.
.pop(ind) --> removes that particular element
.sort() ---> arranges an list in ascending order
.reverse() ---> reverse the position of elements in a list.
.index(ele) --> finds index of an element
.count(ele) --> number of occur

Tuple
------
>> (val1, val2....)
>> Ordered, immutable (cannot be changed). allows duplicate.

packing and unpacking
----------------------
person1 = ("Livinkumar",99,'FED')

name,age,role=person1

name=person1[0]
age=person1[1]
role=person1[2]

In built methods 
------------------
.index(ele) --> finds index of an element
.count(ele) --> number of occur

Set 
-----
>> {val1, val2...}
>> UnOrdered, Mutable, No duplicate.

In built methods 
-----------------
set1.union(set2) 
set1.intersection(set2) 
set1.difference(set2) 

Dictionary 
-----------
>> {kay1:val1,key2:val2.........}
>>unordered, mutable. collection of key-value pairs.

in built methods 
-----------------
.keys()
.values()
.items() ---> [(key1,val1),(key2,val2)....]

Functions 
----------
>> A block of reusable code that performs a specific task.
>> it avoids repetition.

syntax:
--------
def fnName():
   block of code

calling a function --> fnName()

Parameters and arguments 
---------------------------
p --> variables defined in the function definition
a --> Values passed when calling a function.

Types of arguments 
--------------------
Positional argument --> order matters
Keyword argument --> values are passed with paramaters name.
Default argument --> Provide a default value if no argument is passed
Arbitary Arguments --> *name --> collect every arguments as a tuple

Return Keyword
--------------
1) to break the function.
2) to return a value to the caller.


Scope
-------
>> the region of a program where a variable can be accessed.

Local Scope --> Variables defined inside a function. can be accessed only within that function.

Global Scope --> Outside of the function. can be accessed anywhere.


